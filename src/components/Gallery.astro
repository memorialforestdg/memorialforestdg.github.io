---
import {Picture} from 'astro:assets'
import {
  getCollection,
  type CollectionEntry,
  type DataEntryMap
} from 'astro:content'
import {z} from 'zod'
import {imageExifMetadata} from '../schemas.js'
import {
  getAlbumImages,
  extrapolateImageDims,
  extractImageData
} from '../js/imageToolkit.js'
import 'photoswipe/style.css'
type ImageExifMetadata = z.infer<typeof imageExifMetadata>
interface MetaPool extends Array<ImageExifMetadata> {}
interface Props {
  images?: Array<ImageMetadata>
  albumId?: string
  collectionId?: keyof DataEntryMap
  galleryWraperClasses?: string
  galleryUlClasses?: string
  cellLiClasses?: string
  cellLinkClasses?: string
  cellClasses?: string
  cellFormat?: null | 'square'
  targetCellHeight?: number
  targetModalImageLongDim?: number
  ramdomize?: boolean
}

const {
  images,
  collectionId,
  albumId,
  galleryWraperClasses = '',
  galleryUlClasses = '',
  cellLiClasses = '',
  cellLinkClasses = '',
  cellClasses = '',
  cellFormat = null,
  targetCellHeight = 180,
  targetModalImageLongDim = 800,
  ramdomize = false
} = Astro.props

let metaPool: MetaPool | null
let imgs: Array<ImageMetadata> | [] = []
let collection: CollectionEntry<keyof DataEntryMap>

if (!images && !collectionId) {
  throw new Error(
    'No images or collectionId provided. Please provide either an array of astro ImageMetadata or  the name of a valid collection.'
  )
}
if (collectionId && !albumId) {
  throw new Error(
    'No albumId provided. Please provide the name of a valid album'
  )
}

// get the collection
if (!images && collectionId) {
  try {
    const collectionData = await getCollection(collectionId)
    const foundItem = collectionData.find((item) => item.id === albumId)

    // Load metadata pool
    metaPool = await import(
      `../../src/meta/${collectionId}/${collectionId}-meta.json`
    )

    if (foundItem) {
      collection = foundItem
      imgs = await getAlbumImages(albumId)
      if (ramdomize) {
        imgs = imgs.sort(() => Math.random() - 0.5)
      }
    }
  } catch (error) {
    console.warn(error)
    throw new Error(
      'No images found. Please provide either an array of astro ImageMetadata or a valid collectionId.'
    )
  }
} else {
  imgs = images ?? []
}
const targetCellHeightPx = targetCellHeight + 'px'
const targetCellWidthPx =
  cellFormat === 'square' ? targetCellHeightPx : 'inherit'
---

<section class={`gallery ${galleryWraperClasses}`}>
  <ul class=`gallery__list ${galleryUlClasses}`>
    {
      await Promise.all(
        imgs.map(async (image) => {
          const {metadata, lightboxDims, thumbDims, dominantColor} =
            await extractImageData(
              image,
              targetCellHeight,
              targetModalImageLongDim,
              metaPool ?? []
            )
          return (
            <li
              class={`cell_li  ${cellLiClasses}`}
              style={`--dominantColor: ${dominantColor};`}
            >
              <a
                href={image.src}
                class={`cell_link  ${cellLinkClasses}`}
                data-pswp-width={lightboxDims.width}
                data-pswp-height={lightboxDims.height}
                rel="prefetch"
                target="_blank"
                data-cropped="true"
              >
                <Picture
                  class={`cell  ${cellClasses}`}
                  src={image}
                  formats={['avif', 'webp']}
                  alt={
                    metadata?.AltTextAccessibility ||
                    metadata?.Description ||
                    collection?.data?.description ||
                    'gallery image'
                  }
                  densities={[1.5, 2]}
                  width={thumbDims.width}
                  height={thumbDims.height}
                />
              </a>
            </li>
          )
        })
      )
    }
  </ul>
</section>

<style define:vars={{targetCellHeightPx, targetCellWidthPx}} is:global>
  .gallery {
    img {
      object-fit: cover;
    }
  }

  .cell_li,
  .cell {
    /* stylelint-disable custom-property-pattern */
    background-color: var(--dominantColor);
    max-inline-size: calc(var(--targetCellWidthPx));
    max-block-size: calc(var(--targetCellHeightPx));
    /* stylelint-enable custom-property-pattern */
  }
</style>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox'
  const lightbox = new PhotoSwipeLightbox({
    gallery: '.gallery',
    children: 'a',
    pswpModule: () => import('photoswipe'),
    preloadFirstSlide: true,
    returnFocus: true,
    showHideAnimationType: 'zoom'
  })
  lightbox.init()
</script>
