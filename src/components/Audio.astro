---
/**
 * This Astro component features progressive enhancement with the native audio element if js is disabled.
 *
 * Note: auto-play is governed by browser policy, see: https://developer.chrome.com/blog/autoplay/
 * TODO: IOS support for volume control? Mute works as expected, but playback volume doesn't.
 * TODO: See notes in setupSpeedChangeListener re client side UUID generation and the radio name grouping issues.
 *        - add prop for UUID and set data-player-id based on this.
 *
 * TODO: Set playback speed, mute and current volume to localStore.
 * TODO: support multiple sources files.
 * TODO: crossorigin support
 */

import type {ImageMetadata} from 'astro'
import {getImage} from 'astro:assets'

export interface Config {
  autoPlay?: boolean
  artwork?: ImageMetadata | null
  artworkAlt?: string
  artworkHeight?: string
  crossorigin?: null | 'anonymous' | 'use-credentials'
  colors?: {
    accentColor?: string
    bgColor?: string
    btnHoverColor?: string
    bufferColor?: string
    icnColor?: string
    txtColor?: string
    progressColor?: string
    progressColorBg?: string
  }
  class?: string
  controls?:
    | {
        download?: boolean
        loop?: boolean
        playbackSpeeds?: Array<{speed: number; default?: boolean}> | false
        volume?: boolean
        volumeStart?: number // between 0 and 1
      }
    | false
  loopOnLoad?: boolean
  maxwidth?: string
  muteOnLoad?: boolean
  preload?: 'none' | 'metadata' | 'auto'
  title?: ''
}

interface Props {
  src: string
  title: string
  config?: Config
}

// Default configuration values
const defaultConfig: Config = {
  title: '',
  autoPlay: false,
  artwork: null,
  artworkHeight: '116',
  artworkAlt: 'Audio Artwork',
  class: 'no-js',
  colors: {
    accentColor: '',
    bgColor: '',
    btnHoverColor: '',
    bufferColor: '',
    icnColor: '',
    txtColor: '',
    progressColor: '',
    progressColorBg: ''
  },
  controls: {
    download: true,
    loop: true,
    playbackSpeeds: [{speed: 1, default: true}, {speed: 2}, {speed: 3}],
    volume: true,
    volumeStart: 0.5
  },
  crossorigin: undefined,
  loopOnLoad: false,
  maxwidth: '100%',
  muteOnLoad: false,
  preload: 'metadata'
}

const {src, title = '', config = {}} = Astro.props
const finalConfig = {...defaultConfig, ...config} as Config

const albumArt = finalConfig.artwork
  ? await getImage({
      src: finalConfig.artwork,
      width: finalConfig.artworkHeight,
      height: finalConfig.artworkHeight,
      format: 'webp'
    })
  : null

const autoPlayAttr = finalConfig.autoPlay ? {'auto-play': 'true'} : {}
const cssClasses = finalConfig.class ? {class: finalConfig.class} : {}
const preloadAttr = finalConfig.preload ? {preload: finalConfig.preload} : {}
const downloadAttr =
  finalConfig.controls && finalConfig.controls?.download
    ? {download: 'true'}
    : {}
const loopAttr =
  finalConfig.controls && finalConfig?.loopOnLoad ? {loop: 'true'} : {}
const muteAttr =
  finalConfig.controls && finalConfig?.muteOnLoad ? {mute: 'true'} : {}

const combinedAttrs = {
  ...autoPlayAttr,
  ...preloadAttr,
  ...downloadAttr,
  ...loopAttr,
  ...muteAttr,
  ...cssClasses
}
---

<audio-player
  crossorigin={finalConfig!.crossorigin}
  src={src}
  title={title}
  {...combinedAttrs}
>
  <slot>
    <div class="audio-player">
      <figure class="audio-player__nojs-controls">
        <figcaption>{title}</figcaption>
        <audio controls src={src}>
          Your browser does not support audio playback{
            finalConfig.controls &&
              finalConfig.controls?.download &&
              `:<a href={src} download> download it instead</a>`
          }.
        </audio>
      </figure>
      <div class="left-container">
        <button
          id="play-btn"
          class="play-btn btn rounded"
          title="Play track"
          aria-label="Play track"
          aria-pressed="false"
        >
          <svg
            class="icn play-icon"
            id="play-icon"
            aria-hidden="true"
            style="display: block;"
            xmlns="http://www.w3.org/2000/svg"
            width="32"
            height="32"
            viewBox="0 0 24 24"
            ><path
              fill="currentColor"
              d="M9 15.714V8.287q0-.368.244-.588q.243-.22.568-.22q.102 0 .213.028q.11.027.211.083l5.843 3.733q.186.13.28.298q.093.167.093.379t-.093.379t-.28.298l-5.843 3.733q-.101.055-.213.083t-.213.028q-.326 0-.568-.22T9 15.714"
            ></path></svg
          >
          <svg
            class="icn pause-icon"
            id="pause-icon"
            aria-hidden="true"
            style="display: none;"
            xmlns="http://www.w3.org/2000/svg"
            width="32"
            height="32"
            viewBox="0 0 24 24"
            ><path
              fill="currentColor"
              d="M15 18q-.402 0-.701-.299T14 17V7q0-.402.299-.701T15 6h1.5q.402 0 .701.299T17.5 7v10q0 .402-.299.701T16.5 18zm-7.5 0q-.402 0-.701-.299T6.5 17V7q0-.402.299-.701T7.5 6H9q.402 0 .701.299T10 7v10q0 .402-.299.701T9 18z"
            ></path></svg
          >
        </button>
        {
          albumArt && (
            <img
              src={albumArt.src}
              alt={finalConfig.artworkAlt}
              width={albumArt.attributes!.width}
              height={albumArt.attributes!.height}
            />
          )
        }
      </div>
      <div class="right-container">
        <div class="track-volume-container">
          <div class="track-container">
            <label for="progress-bar" id="track-title" class="track-title"
              >Song title</label
            >
            <div class="time-container">
              <span id="current-time">00:00</span>
              /
              <span id="total-time">00:00</span>
            </div>
            <div class="progress-container">
              <progress
                id="progress-bar"
                class="progress-bar"
                aria-label="Track progress bar"
                value="0"
                max="1"
                tabindex="0"></progress>
              <progress
                id="buffer-bar"
                class="buffer-bar"
                value="0"
                max="1"
                tabindex="-1"></progress>
            </div>
          </div>
          {
            finalConfig.controls && finalConfig.controls.volume && (
              <div class="volume-container" title="Volume">
                <button
                  id="volume-mute-btn"
                  class="volume-btn btn"
                  aria-label="Mute track audio"
                  title="Mute track audio"
                >
                  <svg
                    id="volume-on-icon"
                    class="volume-on-icon icn"
                    aria-hidden="true"
                    style="display: block;"
                    xmlns="http://www.w3.org/2000/svg"
                    width="32"
                    height="32"
                    viewBox="0 0 24 24"
                  >
                    <path
                      fill="currentColor"
                      d="M11.423 14H8.808q-.343 0-.576-.232T8 13.192v-2.384q0-.343.232-.576T8.808 10h2.615l2.685-2.685q.244-.244.568-.112t.324.472v8.65q0 .34-.324.472t-.568-.112z"
                    />
                  </svg>
                  <svg
                    id="volume-mute-icon"
                    class="volume-mute-icon icn"
                    aria-hidden="true"
                    style="display: none;"
                    xmlns="http://www.w3.org/2000/svg"
                    width="32"
                    height="32"
                    viewBox="0 0 24 24"
                  >
                    <path
                      fill="currentColor"
                      d="m17.385 12.708l-2.247 2.246q-.14.14-.344.15t-.363-.15t-.16-.354t.16-.354L16.677 12l-2.246-2.246q-.14-.14-.15-.344t.15-.364t.354-.16t.354.16l2.246 2.246l2.246-2.246q.14-.14.344-.15t.364.15t.159.354t-.16.354L18.093 12l2.247 2.246q.14.14.15.344t-.15.364t-.354.16t-.354-.16zM7.73 14H5.116q-.349 0-.578-.23t-.23-.578v-2.384q0-.348.23-.578t.578-.23H7.73l2.685-2.685q.244-.244.568-.116t.324.476v8.65q0 .348-.324.476t-.568-.116z"
                    />
                  </svg>
                </button>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.01"
                  class="volume-slider"
                  id="volume-slider"
                  aria-label="Volume slider"
                  title="Volume slider"
                  value={finalConfig.controls?.volumeStart || '0.5'}
                />
              </div>
            )
          }
        </div>
        {
          finalConfig?.controls &&
            (finalConfig.controls.download ||
              finalConfig.controls.loop ||
              finalConfig.controls.playbackSpeeds) && (
              <div class="controls-drawer-container">
                <div
                  class="controls-drawer"
                  id="controls-drawer"
                  role="toolbar"
                >
                  {finalConfig.controls?.loop && (
                    <button
                      id="looping-btn"
                      class="looping-btn btn"
                      aria-label="Loop current track"
                      aria-pressed="false"
                      title="Loop current track"
                    >
                      <svg
                        id="looping-icon"
                        class="looping-icon icn"
                        aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg"
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                      >
                        <path
                          fill="currentColor"
                          d="M5.5 17q-2.091 0-3.545-1.454T.5 12.002t1.455-3.546T5.5 7q.823 0 1.58.296t1.374.838l2.123 1.82l-.77.657l-2.01-1.746q-.478-.404-1.074-.634Q6.127 8 5.499 8Q3.842 8 2.67 9.172Q1.5 10.345 1.5 12.003q0 1.659 1.171 2.828T5.499 16q.628 0 1.224-.23q.596-.232 1.073-.636l7.75-7q.598-.561 1.361-.848T18.5 7q2.091 0 3.546 1.454t1.454 3.544t-1.455 3.546T18.5 17q-.829 0-1.573-.306t-1.38-.828l-2.085-1.82l.73-.677l2.012 1.766q.477.427 1.073.646t1.225.219q1.656 0 2.827-1.172q1.171-1.173 1.171-2.831t-1.171-2.828T18.501 8q-.628 0-1.224.23q-.596.232-1.073.636l-7.75 7q-.598.561-1.361.848T5.5 17"
                        />
                      </svg>
                    </button>
                  )}
                  {finalConfig.controls?.download && (
                    <a
                      role="button"
                      id="download-btn"
                      href={src}
                      aria-label="Download track"
                      title="Download track"
                      class="download-btn btn"
                      target="_blank"
                      download
                    >
                      <span class="sr-only">download audio</span>
                      <svg
                        id="download-icon"
                        class="download-icon icn"
                        aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg"
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                      >
                        <path
                          fill="currentColor"
                          d="M12 15.248q-.161 0-.298-.053t-.267-.184l-2.62-2.619q-.146-.146-.152-.344t.152-.363q.166-.166.357-.169q.192-.003.357.163L11.5 13.65V5.5q0-.213.143-.357T12 5t.357.143t.143.357v8.15l1.971-1.971q.146-.146.347-.153t.366.159q.16.165.163.354t-.162.353l-2.62 2.62q-.13.13-.267.183q-.136.053-.298.053M6.616 19q-.691 0-1.153-.462T5 17.384v-1.923q0-.213.143-.356t.357-.144t.357.144t.143.356v1.923q0 .231.192.424t.423.192h10.77q.23 0 .423-.192t.192-.424v-1.923q0-.213.143-.356t.357-.144t.357.144t.143.356v1.923q0 .691-.462 1.153T17.384 19z"
                        />
                      </svg>
                    </a>
                  )}
                  {finalConfig.controls?.playbackSpeeds && (
                    <fieldset id="playback-speed" class="playback-speed">
                      {finalConfig.controls.playbackSpeeds.map((speed) => (
                        <label
                          class="speed-btn btn"
                          for={`playback-speed-${speed.speed}`}
                          title={`Set playback speed to ${speed.speed}x`}
                        >
                          {speed?.default ? (
                            <input
                              type="radio"
                              id={`playback-speed-${speed.speed}`}
                              name="playback-speed"
                              value={speed.speed}
                              checked
                            />
                          ) : (
                            <input
                              type="radio"
                              id={`playback-speed-${speed.speed}`}
                              name="playback-speed"
                              value={speed.speed}
                            />
                          )}
                          {speed.speed}x
                        </label>
                      ))}
                    </fieldset>
                  )}
                </div>
                <div
                  role="button"
                  id="controls-drawer-handle"
                  class="controls-drawer-handle btn"
                  aria-label="Open player controls"
                  title="Open player controls"
                  tabindex="-1"
                >
                  <svg
                    id="controls-drawer-icon"
                    class="controls-drawer-icon icn"
                    xmlns="http://www.w3.org/2000/svg"
                    width="32"
                    height="32"
                    viewBox="0 0 24 24"
                  >
                    <path
                      fill="currentColor"
                      d="M12 16a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m0-6a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2"
                    />
                  </svg>
                </div>
              </div>
            )
        }
      </div>
    </div>
  </slot>
</audio-player>

<script>
  class Audio extends HTMLElement {
    audio: HTMLAudioElement | null = null

    progressBar: HTMLProgressElement | null = null
    bufferBar: HTMLProgressElement | null = null
    currentTime: HTMLElement | null = null
    duration: HTMLElement | null = null
    songTitle: HTMLElement | null = null

    playIcon: HTMLElement | null = null
    pauseIcon: HTMLElement | null = null
    playPauseButton: HTMLButtonElement | null = null

    volumeMuteIcon: HTMLElement | null = null
    volumeOnIcon: HTMLElement | null = null
    muteButton: HTMLButtonElement | null = null
    volumeSlider: HTMLInputElement | null = null

    toolbarDrawer: HTMLElement | null = null
    loopingIcon: HTMLElement | null = null
    loopingButton: HTMLButtonElement | null = null
    downloadIcon: HTMLElement | null = null
    downloadButton: HTMLButtonElement | null = null
    playbackSpeedFieldset: HTMLElement | null = null

    config: object | null = null
    playbackSpeed: number = 1
    playerID: string

    static get observedAttributes() {
      return [
        'crossorigin',
        'title',
        'loop',
        'mute',
        'auto-play',
        'preload',
        'src',
        'config'
      ]
    }
    constructor() {
      super()

      // Set the player id
      this.playerID = `player-${Math.random().toString(36).slice(2, 9)}`
      this.setAttribute('data-player-id', this.playerID)

      // rename all element IDs to include the player ID prefix
      const elements = this.querySelectorAll('*')
      for (const el of elements) {
        const idAttr = el.id
        const forAttr = el.getAttribute('for')
        const nameAttr = el.getAttribute('name')

        if (idAttr) {
          el.id = `${idAttr}-${this.playerID}`
        }
        if (forAttr) {
          el.setAttribute('for', `${forAttr}-${this.playerID}`)
        }
        if (nameAttr) {
          el.setAttribute('name', `${nameAttr}-${this.playerID}`)
        }
      }

      // Ensure that this.audio is defined before trying to access its attributes
      this.audio = this.querySelector('audio')
      if (this.audio) {
        // Hide base <audio> element, prevents FOUC
        this.audio.removeAttribute('controls')
      }

      // Remove 'no-js' class
      this.classList.remove('no-js')

      // Query and assign element references
      this.progressBar = this.querySelector(`#progress-bar-${this.playerID}`)
      this.bufferBar = this.querySelector(`#buffer-bar-${this.playerID}`)
      this.currentTime = this.querySelector(`#current-time-${this.playerID}`)
      this.duration = this.querySelector(`#total-time-${this.playerID}`)
      this.songTitle = this.querySelector(`#track-title-${this.playerID}`)

      this.playIcon = this.querySelector(`#play-icon-${this.playerID}`)
      this.pauseIcon = this.querySelector(`#pause-icon-${this.playerID}`)
      this.playPauseButton = this.querySelector(`#play-btn-${this.playerID}`)

      this.volumeOnIcon = this.querySelector(`#volume-on-icon-${this.playerID}`)
      this.volumeMuteIcon = this.querySelector(
        `#volume-mute-icon-${this.playerID}`
      )
      this.muteButton = this.querySelector(`#volume-mute-btn-${this.playerID}`)
      this.volumeSlider = this.querySelector(`#volume-slider-${this.playerID}`)

      this.toolbarDrawer = this.querySelector(
        `#controls-drawer-${this.playerID}`
      )
      this.loopingIcon = this.querySelector(`#looping-icon-${this.playerID}`)
      this.loopingButton = this.querySelector(`#looping-btn-${this.playerID}`)
      this.playbackSpeedFieldset = this.querySelector(
        `#playback-speed-${this.playerID}`
      )
      this.downloadIcon = this.querySelector(`#download-icon-${this.playerID}`)
      this.downloadButton = this.querySelector(`#download-btn-${this.playerID}`)
    }

    connectedCallback() {
      this.configureAudioSettings()
      this.setProgressChangeListener()
      this.checkFileTypeSupport()
      this.setAudioTitle()
      this.setPlaybackChangeListener()
      this.handlePauseOnOtherPlayback()
      this.setBufferChangeListener()
      this.setProgressKeyboardHandler()
      this.setTimeUpdateListener()
      this.handleToolbarNavigation()
      this.setupSpeedChangeListener()
      this.setPlaybackLoopListener()
      this.setMuteChangeListener()
      this.setVolumeChangeListener()
    }

    configureAudioSettings() {
      if (!this.audio) {
        return
      }

      // Set the audio source
      if (this.hasAttribute('src')) {
        this.audio.src = this.getAttribute('src') || ''
      }

      // Set the preload attribute
      if (this.hasAttribute('preload')) {
        const preload = this.getAttribute('preload')
        const validPreloadValues = ['none', 'metadata', 'auto', '', null]
        if (preload !== null && validPreloadValues.includes(preload)) {
          this.audio.preload = preload as HTMLAudioElement['preload']
        }
      }

      // Set the initial volume from the value of the volume slider html
      if (this.volumeSlider) {
        this.audio.volume = parseFloat(this.volumeSlider.value)
      }

      // Set looping state on load
      if (this.hasAttribute('loop') === true) {
        this.toggleLoopingState()
      }

      // Set mute state
      if (this.hasAttribute('mute') === true) {
        this.toggleMuteState()
      }

      // Set autoplay on load
      if (this.hasAttribute('auto-play')) {
        const autoplayAttr = this.getAttribute('auto-play')
        this.audio.autoplay = autoplayAttr === 'true'
      }

      if (this.audio.autoplay) {
        // Ensure the audio element is loaded and ready to play
        this.audio.addEventListener(
          'loadedmetadata',
          () => {
            this.audio!.load()
            console.log('Audio is ready, attempting to play...')
            this.audio!.play().catch((error) => {
              console.error(
                'Autoplay failed due to browser policy or other issue:',
                error
              )
            })
          },
          {once: true} // Only run listner once
        )
      }
    }

    checkFileTypeSupport() {
      if (this.audio && this.audio.src) {
        const songFile = this.audio.src
        const fileType = songFile.substring(songFile.lastIndexOf('.') + 1)

        const fileTypeSupportMap = {
          mp3: 'audio/mpeg',
          m4a: 'audio/mp4; codecs="mp4a.40.2"',
          aac: 'audio/mp4; codecs="mp4a.40.2"',
          wav: 'audio/wav; codecs="1"',
          ogg: 'audio/ogg; codecs="vorbis"'
        }

        const mimeType = fileTypeSupportMap[fileType]

        if (mimeType) {
          if (
            !(
              this.audio.canPlayType &&
              this.audio.canPlayType(mimeType).replace(/no/, '')
            )
          ) {
            this.setDisplayErrorMessage(
              `This browser doesn't support ${fileType.toUpperCase()} audio files.`
            )
          }
        } else {
          if (!this.audio.canPlayType('audio/' + fileType)) {
            this.setDisplayErrorMessage(
              "This browser doesn't support this audio file type."
            )
          }
        }
      }
    }

    dispatchCustomEvent(eventName: string, detail: object = {}) {
      const details = {...detail, playerID: this.playerID}
      const event = new CustomEvent(eventName, {detail: details})
      window.dispatchEvent(event)
    }

    attributeChangedCallback(name, oldValue, newValue) {
      if (oldValue !== null && oldValue !== newValue) {
        switch (name) {
          case 'src':
            this.handleSourceChange()
            break
          case 'title':
            this.setAudioTitle()
            break
          default:
            break
        }
      }
    }

    handleSourceChange() {
      if (this.audio) {
        this.audio.removeEventListener('timeupdate', this.handleTimeUpdate)
        this.audio.removeEventListener(
          'loadedmetadata',
          this.handleMetadataTime
        )
      }

      this.configureAudioSettings()
      this.checkFileTypeSupport()
      this.updateUiForSourceChange()
      this.resetProgressBar()
      this.setTimeUpdateListener()
    }

    updateUiForSourceChange() {
      if (
        !this.audio ||
        !this.playIcon ||
        !this.pauseIcon ||
        !this.playPauseButton
      ) {
        return
      }

      this.pauseIcon.style.display = 'none'
      this.playIcon.style.display = 'block'
      this.playPauseButton.setAttribute('aria-label', 'Play track')
      this.playPauseButton.setAttribute('aria-pressed', 'false')
      this.playPauseButton.setAttribute('title', 'Play track')
      this.audio.pause()
      this.dispatchCustomEvent('audiopaused')
    }

    resetProgressBar() {
      if (this.progressBar) {
        this.progressBar.value = 0
      }
    }

    /**
     * Sets the title of the song based on the 'title' attribute.
     * If the 'title' attribute is not present, it sets the title based on the file name
     * of the 'src' attribute.
     */
    setAudioTitle() {
      if (this.songTitle && this.hasAttribute('title')) {
        // Set the title based on the 'title' attribute
        this.songTitle.textContent = this.getAttribute('title')
      } else if (this.songTitle && this.hasAttribute('src')) {
        // Set the title based on the file name of the 'src' attribute
        const src = this.getAttribute('src')
        const fileName = src!.substring(src!.lastIndexOf('/') + 1)
        this.songTitle.textContent = fileName || ''
      }
    }

    handlePauseOnOtherPlayback() {
      window.addEventListener('audioplaying', (e: CustomEvent) => {
        if (!this.audio || e.detail.playerID === this.playerID) {
          return
        }
        if (this.audio.paused) return
        this.audio.paused
        this.togglePlaybackState()
      })
    }

    setPlaybackChangeListener() {
      if (
        !this.audio ||
        !this.playPauseButton ||
        !this.playIcon ||
        !this.pauseIcon
      ) {
        return
      }

      this.playPauseButton.addEventListener('click', () =>
        this.togglePlaybackState()
      )
    }

    toggleMuteState() {
      if (
        !this.audio ||
        !this.volumeMuteIcon ||
        !this.volumeOnIcon ||
        !this.muteButton
      ) {
        return
      }
      if (this.audio.muted) {
        this.audio.muted = false
        this.muteButton!.setAttribute('aria-pressed', 'false')
        this.muteButton!.setAttribute('aria-label', 'Mute tack audio')
        this.muteButton!.setAttribute('title', 'Mute tack audio')
        this.volumeMuteIcon.style.display = 'none'
        this.volumeOnIcon.style.display = 'block'
        this.dispatchCustomEvent('audiounmuted')
      } else {
        this.audio.muted = true
        this.muteButton!.setAttribute('aria-pressed', 'true')
        this.muteButton!.setAttribute('aria-label', 'Unmute track audio')
        this.muteButton!.setAttribute('title', 'Unmute track audio')
        this.volumeOnIcon.style.display = 'none'
        this.volumeMuteIcon.style.display = 'block'
        this.dispatchCustomEvent('audiomuted')
      }
    }

    togglePlaybackState() {
      if (
        !this.audio ||
        !this.playIcon ||
        !this.pauseIcon ||
        !this.playPauseButton
      ) {
        return
      }

      if (this.audio.duration > 0 && this.audio.paused) {
        this.playIcon.style.display = 'none'
        this.pauseIcon.style.display = 'block'
        this.playPauseButton.setAttribute('aria-pressed', 'true')
        this.playPauseButton.setAttribute('aria-label', 'Pause track')
        this.playPauseButton.setAttribute('title', 'Pause track')
        this.audio.play()
        this.dispatchCustomEvent('audioplaying')
      } else {
        this.pauseIcon.style.display = 'none'
        this.playIcon.style.display = 'block'
        this.playPauseButton.setAttribute('aria-pressed', 'false')
        this.playPauseButton.setAttribute('aria-label', 'Play track')
        this.playPauseButton.setAttribute('title', 'Play track')
        this.audio.pause()
        this.dispatchCustomEvent('audiopaused')
      }
    }

    setProgressChangeListener() {
      this.progressBar!.addEventListener('click', (event) => {
        if (this.progressBar && this.audio) {
          let percent = event.offsetX / this.progressBar.offsetWidth
          this.audio.currentTime = percent * this.audio.duration
          this.progressBar.value = percent
        }
      })
    }

    setBufferChangeListener() {
      if (!this.bufferBar || !this.audio) {
        return
      }

      this.audio.addEventListener('progress', () => {
        const buffered = this.audio!.buffered

        if (buffered.length > 0) {
          const end = buffered.end(buffered.length - 1)
          const duration = this.audio!.duration
          const value = end / duration
          this.bufferBar!.value = value
        }
      })
    }

    /**
     * Handles keyboard events on the progress bar
     *  - ArrowRight / ArrowLeft: fastforward / rewind 5 seconds
     *  - MediaTrackNext / MediaTrackPrevious: fastforward / rewind 5 seconds
     *  - ArrowDown / ArrowUp: do nothing
     *  - Space / Enter: toggle play/pause
     */
    setProgressKeyboardHandler() {
      if (!this.progressBar || !this.audio) {
        return
      }

      this.progressBar.addEventListener('keydown', (event) => {
        const step = 5 // seconds to advance or rewind
        switch (event.key) {
          case 'MediaTrackNext':
          case 'ArrowRight':
            this.audio!.currentTime = Math.min(
              this.audio!.currentTime + step,
              this.audio!.duration
            )
            break
          case 'MediaTrackPrevious':
          case 'ArrowLeft':
            this.audio!.currentTime = Math.max(
              this.audio!.currentTime - step,
              0
            )
            break
          case 'ArrowDown':
          case 'ArrowUp':
            event.preventDefault()
            break
          case ' ':
          case 'Space':
          case 'Enter':
            event.preventDefault()
            this.togglePlaybackState()
            break
        }
      })
    }

    handleToolbarNavigation() {
      if (!this.audio || !this.toolbarDrawer) {
        return
      }
      this.toolbarDrawer.addEventListener('keydown', (event) => {
        const controls = this.toolbarDrawer!.querySelectorAll<HTMLElement>(
          'button, input, select, a'
        )
        const index = Array.from(controls).indexOf(event.target as HTMLElement)

        if (index < 0) {
          return
        }

        switch (event.key) {
          case 'ArrowLeft':
          case 'ArrowUp':
            event.preventDefault()
            controls[(index - 1 + controls.length) % controls.length].focus()
            break
          case 'ArrowRight':
          case 'ArrowDown':
            event.preventDefault()
            controls[(index + 1) % controls.length].focus()
            break
        }
      })
    }

    playAudio() {
      if (
        this.audio &&
        this.playIcon &&
        this.pauseIcon &&
        this.playPauseButton
      ) {
        this.pauseIcon.style.display = 'block'
        this.playIcon.style.display = 'none'
        this.playPauseButton.setAttribute('aria-label', 'Pause song')
        this.audio.play()
        this.dispatchCustomEvent('audioplaying')
      }
    }

    setTimeUpdateListener() {
      this.audio!.addEventListener('loadedmetadata', () => {
        this.handleMetadataTime()
      })
    }

    handleMetadataTime() {
      if (this.audio && this.currentTime && this.duration) {
        this.currentTime.textContent = `${this.formatTime(
          this.audio.currentTime
        )}`
        this.duration.textContent = `${this.formatTime(this.audio.duration)}`
        this.audio.addEventListener('timeupdate', () => {
          this.handleTimeUpdate()
        })
      }
    }

    handleTimeUpdate() {
      if (
        !this.audio ||
        !this.currentTime ||
        !this.duration ||
        !this.progressBar ||
        !this.playIcon ||
        !this.pauseIcon ||
        !this.playPauseButton
      ) {
        return
      }

      if (isNaN(this.audio.currentTime / this.audio.duration)) {
        return
      }

      this.updateProgressBar()
      this.updateTimeDisplay()

      if (this.audio.currentTime === this.audio.duration) {
        this.handleAudioCompletion()
      }
    }

    updateProgressBar() {
      this.progressBar!.value = this.audio!.currentTime / this.audio!.duration
    }

    updateTimeDisplay() {
      this.currentTime!.textContent = `${this.formatTime(this.audio!.currentTime)}`
      this.duration!.textContent = `${this.formatTime(this.audio!.duration)}`
    }

    handleAudioCompletion() {
      this.audio!.currentTime = 0
      this.pauseIcon!.style.display = 'none'
      this.playIcon!.style.display = 'block'
      this.playPauseButton!.setAttribute('aria-label', 'Play track')
      this.playPauseButton!.setAttribute('title', 'Play track')
      this.dispatchCustomEvent('audiopaused')
      this.dispatchCustomEvent('audiofinished')
    }

    setVolumeChangeListener() {
      if (!this.audio || !this.volumeSlider) {
        return
      }
      this.volumeSlider.addEventListener('input', () => {
        this.audio!.volume = parseFloat(this.volumeSlider!.value)
      })
    }

    setMuteChangeListener() {
      if (!this.audio || !this.muteButton) {
        return
      }
      this.muteButton.addEventListener('click', () => this.toggleMuteState())
    }

    /**
     * Set the playback speed of the audio.
     * Note min-max values https://stackoverflow.com/a/32320020/362445
     */
    setupSpeedChangeListener() {
      if (!this.audio || !this.playbackSpeedFieldset) {
        return
      }
      const playbackSpeedGroup = this.playbackSpeedFieldset!.querySelectorAll(
        `input[name="playback-speed-${this.playerID}"]`
      )
      if (playbackSpeedGroup) {
        playbackSpeedGroup.forEach((radio: HTMLInputElement) => {
          // As we are passing the radio buttons in via a slot,
          // the browser has already parsed this markup and identified the radio groups based on the name ID (which at this point has not been set).
          // We refresh the associations by manually setting the checked state.
          if (radio.defaultChecked) {
            radio.checked = true
            this.audio!.playbackRate = parseFloat(radio.value)
          }

          radio.addEventListener('change', (e) => {
            if ((e.target as HTMLElement)?.id !== radio.id) {
              return
            }
            this.audio!.playbackRate = parseFloat(radio.value)
            this.dispatchCustomEvent('audioplaybackspeedchanged', {
              speed: radio.value
            })
          })
          // Set speed using Enter key
          radio.addEventListener('keydown', (e) => {
            if ((e.target as HTMLElement)?.id !== radio.id) {
              return
            }
            if (e.key === 'Enter') {
              radio.checked = true
              this.audio!.playbackRate = parseFloat(radio.value)
              this.dispatchCustomEvent('audioplaybackspeedchanged', {
                speed: radio.value
              })
            }
          })
        })
      }
    }

    setPlaybackLoopListener() {
      if (!this.audio || !this.loopingButton) {
        return
      }
      this.loopingButton.addEventListener('click', () => {
        this.toggleLoopingState()
      })
    }

    toggleLoopingState() {
      if (!this.audio || !this.loopingButton) {
        return
      }
      if (this.audio.loop) {
        this.audio.loop = false
        this.loopingButton.setAttribute('aria-label', 'Loop current track')
        this.loopingButton.setAttribute('aria-pressed', 'false')
        this.dispatchCustomEvent('audioloopingstopped')
      } else {
        this.audio.loop = true
        this.loopingButton.setAttribute(
          'aria-label',
          'Stop current track looping'
        )
        this.loopingButton.setAttribute('aria-pressed', 'true')
        this.dispatchCustomEvent('audioloopingstopped')
      }
    }

    setDisplayErrorMessage(message) {
      if (this.songTitle) {
        this.songTitle.textContent = message
      }
    }

    formatTime(seconds: number) {
      if (isNaN(seconds)) {
        return '00:00'
      }
      const hours = Math.floor(seconds / 3600)
      const minutes = Math.floor((seconds % 3600) / 60)
      const remainingSeconds = Math.floor(seconds % 60)

      const formattedMinutes = minutes.toString().padStart(2, '0')
      const formattedSeconds = remainingSeconds.toString().padStart(2, '0')

      if (hours > 0) {
        const formattedHours = hours.toString().padStart(2, '0')
        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`
      } else {
        return `${formattedMinutes}:${formattedSeconds}`
      }
    }
  }

  customElements.define('audio-player', Audio)
</script>

<style
  define:vars={{
    maxwidth: finalConfig.maxwidth,
    artworkHeight: finalConfig.artworkHeight,
    accentColor: finalConfig.colors!.accentColor,
    bgColor: finalConfig.colors!.bgColor,
    btnHoverColor: finalConfig.colors!.btnHoverColor,
    bufferColor: finalConfig.colors!.bufferColor,
    icnColor: finalConfig.colors!.icnColor,
    txtColor: finalConfig.colors!.txtColor,
    progressColor: finalConfig.colors!.progressColor,
    progressColorBg: finalConfig.colors!.progressColorBg
  }}
>
  /* stylelint-disable plugin/no-low-performance-animation-properties */
  /* stylelint-disable plugin/no-unsupported-browser-features  */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    white-space: nowrap;
    border-width: 0;
    clip: rect(0, 0, 0, 0);
  }

  @keyframes audio-player-fade-in {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  .audio-player {
    display: grid;
    grid-template-columns: auto 1fr;
    width: var(--maxwidth, 100%);
    height: calc(var(--artworkHeight) * 1px);
    margin: 0 auto;
    overflow: hidden;
    color: var(--txtColor, white);
    background-color: var(--bgColor, hsl(192deg 41% 27%));
    border-radius: 3px;
    place-items: center start;
    box-shadow:
      0 1px 1px hsl(0deg 0% 0% / 7.5%),
      0 2px 2px hsl(0deg 0% 0% / 7.5%),
      0 4px 4px hsl(0deg 0% 0% / 7.5%),
      0 8px 8px hsl(0deg 0% 0% / 7.5%),
      0 16px 16px hsl(0deg 0% 0% / 7.5%);
  }

  .btn {
    display: block;
    align-items: center;
    justify-content: center;
    margin: 0;
    padding: 0.5rem;
    color: var(--txtColor, white);
    line-height: 0;
    background-color: var(--accentColor, hsl(244deg 80% 63%));
    border: none;
    border-radius: 0;
    cursor: pointer;
  }

  .btn.rounded {
    border-radius: 50% !important;
  }

  .play-btn {
    z-index: 1;
    grid-area: 1 / 1 / 2 / 2;
    width: 20%;
    min-width: 50px;
    height: 20%;
    min-height: 50px;
  }

  *:focus,
  *:focus-visible {
    outline: 2px solid var(--txtColor, white);
    outline-offset: -2px;
    transition:
      outline 50ms ease-in-out,
      background 50ms ease-in-out;
  }

  .btn .icn {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    color: var(--icnColor, var(--txtColor, currnetColor));
  }

  .track-container {
    position: relative;
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
  }

  .time-container {
    padding-inline: 10px;
    z-index: 1;
    grid-column: 1;
    pointer-events: none;
  }

  .progress-container {
    position: absolute;
    z-index: 0;
    display: grid;
    grid-column: 1 / span 2;
    align-items: center;
    padding: 10px;
    pointer-events: none;
    inset: 0;
  }

  .progress-container progress {
    position: absolute;
    pointer-events: auto;
  }

  .buffer-bar,
  .progress-bar {
    display: block;
    width: 100%;
    height: 100%;
    border: none;
    cursor: pointer;
    appearance: none; /* Remove default appearance */
  }

  .progress-bar {
    z-index: 1;
  }

  .progress-bar::-webkit-progress-bar {
    display: block;
    width: 100%;
    height: 100%;
    background-color: transparent;
    border: none;
    cursor: pointer;
  }

  .progress-bar::-webkit-progress-value {
    display: block;
    height: 100%;
    background-color: var(--accentColor, hsl(244deg 80% 63%));
    border: none;
    cursor: pointer;
    transition: 0.1s ease-in;
  }

  .progress-bar::-moz-progress-bar {
    display: block;
    height: 100%;
    background-color: var(--accentColor, hsl(244deg 80% 63%));
    border: none;
    cursor: pointer;
    transition: 0.1s ease-in;
  }

  .buffer-bar {
    z-index: 0;
    background-color: var(--progressColorBg, hsl(0deg 0% 75%));
    transition: 0.5s ease;
  }

  .buffer-bar::-webkit-progress-value {
    display: block;
    height: 100%;
    background-color: var(--bufferColor, hsl(0deg 0% 29% / 81%));
    border: none;
    transition: 0.5s ease;
    pointer-events: none;
  }

  .buffer-bar::-moz-progress-bar {
    display: block;
    height: 100%;
    background-color: var(--bufferColor, hsl(0deg 0% 29% / 81%));
    border: none;
    transition: 0.3s ease;
    pointer-events: none;
  }

  .track-title {
    z-index: 1;
    display: block;
    grid-column: 1;
    margin: 0;
    overflow: hidden;
    font-weight: 600;
    font-size: 2rem;
    white-space: nowrap;
    text-overflow: ellipsis;
    padding-inline-start: 10px;
    pointer-events: none;
  }

  .left-container {
    display: grid;
    order: 1;
    width: calc(var(--artworkHeight, 166) * 1px);
    height: calc(var(--artworkHeight, 166) * 1px);
    place-items: center center;
  }

  .left-container img {
    display: block;
    grid-area: 1 / 1 / 2 / 2;
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 1/1;
  }

  .right-container {
    display: flex;
    align-items: center;
    justify-content: center;
    order: 2;
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
  }

  .controls-drawer-container {
    display: grid;
    grid-template-columns: 0fr 30px;
    justify-content: start;
    justify-content: end;
    height: 100%;
    background-color: var(--progressColorBg, hsl(0deg 0% 75%));
    transition: 0.5s ease;
    place-items: stretch stretch;
  }

  .controls-drawer-container:focus-within,
  .controls-drawer-container:hover {
    grid-template-columns: 3fr 30px;
  }

  .controls-drawer .btn {
    width: 100%;
    height: 100%;
    background-color: var(--btnHoverColor, hsl(0deg 0% 57%));
  }

  .controls-drawer-handle {
    padding: 5px;
  }

  .controls-drawer-container:focus-within .controls-drawer-handle,
  .controls-drawer-container:hover .controls-drawer-handle {
    background-color: var(--progressColorBg, hsl(0deg 0% 75%));
    filter: brightness(0.8);
  }

  .controls-drawer {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 1fr;
    overflow: hidden;
    border-left: 1px solid var(--accentColor, hsl(244deg 80% 63%));
  }

  .controls-drawer:has(.download-btn):has(.looping-btn) {
    grid-template-rows: 1fr 1fr;
  }

  .controls-drawer:has(.download-btn, .looping-btn):has(.playback-speed) {
    grid-template-columns: minmax(0.5fr, 1fr) minmax(0.5fr, 1fr);
  }

  .controls-drawer .btn .icn {
    width: 100%;
    min-width: 15px;
  }

  .controls-drawer:has(.looping-btn) .download-btn {
    border-top: 1px solid var(--progressColorBg, hsl(0deg 0% 75%));
  }

  .controls-drawer .looping-btn[aria-pressed='true'] {
    background-color: var(--accentColor, hsl(244deg 80% 63%));
  }

  .controls-drawer .playback-speed {
    display: flex;
    flex-direction: column;
    grid-row: 1 / span 2;
    grid-column: 2;
    place-content: center space-around;
    align-items: center;
    border: none;
  }

  .controls-drawer .speed-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    padding: 0.5em;
    font-size: 0.8rem;
    border: none;
    border-right: 1px solid var(--progressColorBg, hsl(0deg 0% 75%));
    border-left: 1px solid var(--progressColorBg, hsl(0deg 0% 75%));
    outline: none;
    cursor: pointer;
  }

  .controls-drawer .speed-btn:hover,
  .controls-drawer .speed-btn:focus,
  .controls-drawer .btn:focus-within,
  .controls-drawer .btn:focus,
  .controls-drawer .btn:hover:not(.controls-drawer-handle) {
    background-color: var(--accentColor, hsl(244deg 80% 63%));
    outline: none;
    filter: brightness(0.8);
    transition: filter 0.3s ease;
  }

  .controls-drawer .speed-btn:not(:first-child) {
    border-top: 1px solid var(--progressColorBg, hsl(0deg 0% 75%));
  }

  .controls-drawer .speed-btn input {
    position: absolute;
    width: 0;
    height: 0;
    opacity: 0;
  }

  .controls-drawer .speed-btn:has(input:checked) {
    background: var(--accentColor, hsl(244deg 80% 63%));
  }

  .track-volume-container {
    display: grid;
    width: 100%;
    height: 100%;
    transition: 0.3s ease;
  }

  .track-volume-container:has(.volume-container) {
    grid-template-rows: auto 3px;
  }

  .track-volume-container:has(.volume-btn[aria-pressed='true']),
  .track-volume-container:has(.volume-container:hover),
  .track-volume-container:has(.volume-container:focus-within) {
    grid-template-rows: auto var(--volTrackHeight, 20px);
  }

  .volume-container {
    position: relative;
    display: flex;
    grid-row: 2;
    grid-column: 1;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: auto;
    border: none;
  }

  .volume-slider {
    width: 100%;
    height: 100%;
    background: var(--btnHoverColor, hsl(0deg 0% 57%));
    border-radius: 0;
    outline: none;
    appearance: none;
  }

  .volume-slider:focus,
  .volume-slider:focus-visible {
    outline: none;
  }

  .volume-container .volume-btn {
    width: 20px;
    height: 100%;
    padding: 0;
    line-height: 0;
    background: var(--btnHoverColor, hsl(0deg 0% 57%));
    transition: background 0.2s ease;
  }

  .volume-container .volume-btn .icn {
    color: var(--btnHoverColor, hsl(0deg 0% 57%));
  }

  .volume-btn[aria-pressed='true'],
  .volume-container:hover .volume-btn,
  .volume-container:focus-within .volume-btn {
    background: var(--accentColor, hsl(244deg 80% 63%));
  }

  .volume-container:hover .volume-btn .icn,
  .volume-container:focus-within .volume-btn .icn,
  .volume-container .volume-btn[aria-pressed='true'] .icn,
  .volume-container .volume-container:hover .volume-btn .icn {
    color: var(--icnColor, var(--txtColor, currnetColor));
    background: var(--accentColor, hsl(244deg 80% 63%));
  }

  .volume-slider::-webkit-slider-thumb {
    width: 9px;
    height: var(--volTrackHeight, 20px);
    background: var(--accentColor, hsl(244deg 80% 63%));
    border: 2px solid var(--btnHoverColor, hsl(0deg 0% 57%));
    border-bottom: 0;
    border-radius: 0;
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    cursor: pointer;
    appearance: none;
  }

  .volume-slider::-moz-range-thumb {
    width: 9px;
    height: var(--volTrackHeight, 20px);
    background: var(--accentColor, hsl(244deg 80% 63%));
    border: 2px solid var(--btnHoverColor, hsl(0deg 0% 57%));
    border-bottom: 0;
    border-radius: 0;
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    cursor: pointer;
    appearance: none;
  }

  .volume-slider:focus::-webkit-slider-thumb {
    border: 2px solid var(--txtColor, white);
  }

  .volume-slider:focus::-moz-range-thumb {
    border: 2px solid var(--txtColor, white);
  }

  .volume-container:focus-within .volume-slider::-webkit-slider-thumb {
    border-top: 0;
  }

  .volume-container:focus-within .volume-slider::-moz-range-thumb,
  .volume-container:hover .volume-slider::-moz-range-thumb {
    border: 2px solid var(--btnHoverColor, hsl(0deg 0% 57%));
  }

  .volume-container:focus-within .volume-slider::-moz-range-thumb {
    border-top: 0;
  }

  /**
   * No js
   */

  .audio-player__nojs-controls {
    display: none;
    opacity: 0;
    animation-name: audio-player-fade-in;
    animation-duration: 0.2s;
    animation-timing-function: ease-in-out;
    animation-delay: 2s; /* Prevents FOUC clash with native audio element when the web-component loads. */
    animation-fill-mode: both;
  }

  .no-js .left-container,
  .no-js .right-container {
    display: none;
  }

  .no-js .audio-player__nojs-controls {
    display: block;
    inline-size: 100%;
    opacity: 1;
  }

  .no-js .audio-player__nojs-controls figcaption {
    margin-inline-start: 1rem;
  }

  .no-js .audio-player {
    grid-template-columns: 1fr;
    padding: 0.5rem;
  }

  .no-js .audio-player__nojs-controls audio {
    inline-size: 100%;
    display: block;
  }

  /* Hide controls on very small screens. */
  @media (max-width: 550px) {
    .controls-drawer-container {
      display: none;
    }
  }
</style>
