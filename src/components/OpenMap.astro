---
export interface IconType {
  iconUrl: string // the url for the icon
  shadowUrl?: string // the url for the shadow image
  iconSize?: [number, number] // size of the icon
  shadowSize?: [number, number] // size of the shadow
  iconAnchor?: [number, number] // point of the icon which will correspond to marker's location
  shadowAnchor?: [number, number] // the same for the shadow
  popupAnchor?: [number, number] // point from which the popup should open relative to the iconAnchor
  tooltipAnchor?: [number, number] // point from which the tooltip should open relative to the iconAnchor
}
interface Props {
  id?: string
  style?: string
  classes?: string
  width?: string
  height?: string
  lat: number
  lon: number
  zoom?: string
  maxzoom?: string
  scrollwheel?: boolean
  controls?: boolean
  icon?: IconType
}

const {
  id = 'map',
  style = 'border  : 1px solid var(--brand-surface-1);',
  classes = '',
  width = '100%',
  height = '350px',
  lat = '-3.6107',
  lon = '55.0691',
  zoom = '19',
  maxzoom = '19',
  scrollwheel = true,
  controls = true,
  icon
} = Astro.props
---

<>
  <open-map
    id={id}
    style={style}
    class=`open-map ${classes}`
    data-lon={lon}
    data-lat={lat}
    data-zoom={zoom}
    data-maxzoom={maxzoom}
    data-scrollwheel={scrollwheel}
    data-controls={controls}
    data-icon={JSON.stringify(icon)}
  >
  </open-map>
</>

<script>
  import L from 'leaflet/dist/leaflet'
  import 'leaflet/dist/leaflet.css'
  import iconImg from 'leaflet/dist/images/marker-icon.png'
  class OpenMap extends HTMLElement {
    constructor() {
      super()
      const {lon, lat, zoom, controls, maxzoom, scrollwheel, icon} =
        this.dataset

      console.log(this.dataset)
      console.log('scrollwheel', scrollwheel)

      const id = this.id
      const mapOptions = {
        center: [lon, lat],
        zoom,
        maxZoom: maxzoom,
        scrollWheelZoom: scrollwheel,
        zoomControl: controls
      }
      const map = L.map(id, mapOptions)
      const layer = new L.TileLayer(
        'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
        {
          maxZoom: 25,
          attribution:
            '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap: Tiles by Humanitarian</a>'
        }
      )
      let loadIcon = icon
        ? L.icon(JSON.parse(icon))
        : L.icon({iconUrl: iconImg.src})

      L.marker([lon, lat], {icon: loadIcon}).addTo(map)
      map.addLayer(layer)
    }
  }

  customElements.define('open-map', OpenMap)
</script>

<style define:vars={{width, height}} is:global>
  .leaflet-control-attribution {
    font-size: 10px;
  }

  .open-map .leaflet-attribution-flag {
    display: none !important;
  }

  .open-map {
    display: block;
    width: var(--width);
    height: var(--height);
  }
</style>
