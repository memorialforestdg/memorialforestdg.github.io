---
import BaseLayout from './BaseLayout.astro'
import Breadcrumbs from '~components/Breadcrumbs.astro'
import Flourish from '~components/Flourish.astro'
import Gallery from '~components/Gallery.astro'
import OpenMap from '~components/OpenMap.astro'
import sluggo from '~js/sluggo'
import type {ImageMetadata} from 'astro'
import {type DataEntryMap} from 'astro:content'
import {type Location} from '~components/OpenMap.astro'
import {mapLocations} from '~js/mapLocationsExpanded'

interface Props {
  frontmatter: {
    pageTitle: string
    bannerImage?: any
    bannerHeight?: number
    bannerAlt?: string
    flourishClasses?: Array<string>
    plantingCollectionId?: keyof DataEntryMap
    plantingAlbumId?: string
    launchCollectionId?: keyof DataEntryMap
    launchAlbumId?: string
  }
}

const {
  pageTitle,
  bannerImage,
  bannerHeight = 350,
  bannerAlt,
  flourishClasses,
  plantingCollectionId,
  plantingAlbumId,
  launchCollectionId,
  launchAlbumId
} = Astro.props.frontmatter

// Find the array index of the location id that matches the pageTitle
const locationIndex = mapLocations.findIndex(
  (location: Location) => location.id === sluggo(pageTitle)
)

// create an immutable copy of mapLocations
const locationsCopy = [...mapLocations]

// Set the popup to open
locationsCopy[locationIndex].open = true

// https://markjames.dev/blog/dynamically-importing-images-astro
const images = import.meta.glob<{default: ImageMetadata}>(
  '../images/**/*.{png,PNG,jpg,JPG,jpeg,svg,webp,avif}'
)
const banner = images[bannerImage] ? await images[bannerImage]() : (null as any)
const BannerImageMetadata = banner.default as ImageMetadata

const mapHeight = '350px'
---

<BaseLayout
  pageTitle={pageTitle}
  bodyClasses="forest-location"
  bannerImage={BannerImageMetadata}
  bannerHeight={bannerHeight}
  bannerAlt={bannerAlt}
>
  <main id="main">
    <div class="open-map__wrap nt-3 pb-3 poly-shadow">
      <OpenMap
        id={sluggo(pageTitle)}
        lat={locationsCopy[locationIndex].lat}
        lon={locationsCopy[locationIndex].lon}
        height={mapHeight}
        classes="container poly-3 z-0"
        style="@media (max-width: 700px) { width: calc(100% - 4px); }"
        zoom="17"
        controls="true"
        locations={locationsCopy}
        geojson={`../../boundry.json`}
        geostyle={{
          weight: 2,
          opacity: 1,
          color: 'green',
          fillOpacity: 0.05
        }}
      />
    </div>
    <div class="location container">
      <div class="stack pl-5-ns pr-5-ns pt-4-ns">
        <Breadcrumbs />
        <div class="markdown-content">
          <Flourish classes={flourishClasses}>
            <slot />
          </Flourish>
        </div>
          {
            plantingCollectionId && plantingAlbumId && (
              <hr />
              <h2 class="tc f3 pb-3">Planting the forest:</h2>
              <div class="gallery__wrap">
                <Gallery
                  collectionId={plantingCollectionId}
                  albumId={plantingAlbumId}
                  galleryWraperClasses={'nt-4'}
                  galleryUlClasses={
                    'pa-0 list flex flex-wrap gap-2 justify-center'
                  }
                  cellLiClasses={'pa-0 ma-0 shadow-hover grow'}
                  cellClasses={'pa-0 ma-0 bg-brand-purple br1'}
                  cellFormat="square"
                />
              </div>
            )
          }
          {
            launchCollectionId && launchAlbumId && (
              <hr />
              <h2 class="tc f3 pb-3">Launch event:</h2>
              <div class="gallery__wrap">
                <Gallery
                  collectionId={launchCollectionId}
                  albumId={launchAlbumId}
                  galleryWraperClasses={'nt-4'}
                  galleryUlClasses={
                    'pa-0 list flex flex-wrap gap-2 justify-center'
                  }
                  cellLiClasses={'pa-0 ma-0 shadow-hover grow'}
                  cellClasses={'pa-0 ma-0 bg-brand-purple br1'}
                  cellFormat="square"
                />
              </div>
            )
          }
      </div>
    </div>
  </main>
</BaseLayout>

<style define:vars={{mapHeight, bannerHeight}} is:global>
  .gallery .cell_li:hover,
  .gallery .cell_li:focus-within {
    border-radius: 3px;
    outline: 2px dotted var(--brand-cyan-dk, black);
    transition: outline 0.1s ease;
  }

  .open-map {
    background-color: var(--brand-teal-dk);
  }

  @media (max-width: 550px) {
    .open-map {
      --height: calc(var(--mapHeight) * 0.6) !important;
    }
  }

</style>
